/**
 * DO NOT REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Contributor(s):
 *
 * The Original Software is SimpleDBM (www.simpledbm.org).
 * The Initial Developer of the Original Software is Dibyendu Majumdar.
 *
 * Portions Copyright 2005-2014 Dibyendu Majumdar. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the
 * Apache License Version 2 (the "APL"). You may not use this
 * file except in compliance with the License. A copy of the
 * APL may be obtained from:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the APL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the APL, the GPL or the LGPL.
 *
 * Copies of GPL and LGPL may be obtained from:
 * http://www.gnu.org/licenses/license-list.html
 */
package org.simpledbm.rss.api.tx;

import org.simpledbm.common.api.registry.Storable;
import org.simpledbm.rss.api.pm.PageId;
import org.simpledbm.rss.api.wal.Lsn;

/**
 * The Loggable interface and its sub-interfaces define the contract between the
 * Transaction Manager and its clients.
 * 
 * @author Dibyendu Majumdar
 * @since 23-Aug-2005
 * @see org.simpledbm.rss.api.tx.Redoable
 * @see org.simpledbm.rss.api.tx.Undoable
 * @see org.simpledbm.rss.api.tx.Compensation
 * @see org.simpledbm.rss.api.tx.NonTransactionRelatedOperation
 * @see org.simpledbm.rss.api.tx.PostCommitAction
 * @see org.simpledbm.rss.api.tx.ContainerDeleteOperation
 * @see org.simpledbm.rss.api.tx.LoggableFactory
 * @see org.simpledbm.rss.api.tx.BaseLoggable
 */
public interface Loggable extends Storable {

    /**
     * Gets the LSN associated with the log record.
     */
    public Lsn getLsn();

    /**
     * Sets the LSN for the log record.
     */
    public void setLsn(Lsn lsn);

    /**
     * Gets the ID of the TransactionalModule that generated this log record.
     * The TransactionalModule is responsible for redoing or undoing the effects
     * of this log record.
     * 
     * @see TransactionalModule
     */
    public int getModuleId();

    //    /**
    //     * Sets the ID of the TransactionalModule that generated this log record. 
    //     * The TransactionalModule is responsible for redoing or undoing the effects
    //     * of this log record.
    //     */
    //    public void setModuleId(int moduleId);

    /**
     * Gets the ID of the Page to which this log is related. Most log records
     * are related to individual pages. Sometimes a log record may be related to
     * more than one page, for example, a log record that implements
     * {@link MultiPageRedo} interface. Note that Dummy Compensation Log records
     * must return null from this method.
     */
    public PageId getPageId();

    /**
     * Sets the ID of the page for which this log record is being generated.
     * Also sets the type of the page. When the formatting of a new page is
     * being logged, the page type must be saved so that the correct type of
     * page can be fixed in the buffer pool during recovery.
     */
    public void setPageId(int pageType, PageId pageId);

    /**
     * When the formatting of a new page is being logged, the page type must be
     * saved so that the correct type of page can be fixed in the buffer pool
     * during recovery.
     */
    public int getPageType();

    /**
     * Points to the previous log record generated by the transaction.
     */
    public Lsn getPrevTrxLsn();

    /**
     * Points to the previous log record generated by the transaction.
     */
    public void setPrevTrxLsn(Lsn prevTrxLsn);

    /**
     * Transaction that created the log record. Automatically set when the log
     * record is inserted by the transaction. Note that for log records that are
     * not related to transactions, such as
     * {@link NonTransactionRelatedOperation}, the trxid.isNull() will evaluate
     * to true.
     */
    public TransactionId getTrxId();

    /**
     * Transaction that created the log record. Automatically set when the log
     * record is inserted by the transaction.
     */
    public void setTrxId(TransactionId trxId);
}
