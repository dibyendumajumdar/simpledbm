1.0.12-BETA:
 * dm: Issue 67: General: Exceptions are thrown by common ExceptionHandler utility allowing them 
   to be logged at the point where the exception is thrown. Additional action can be taken if necessary.
 * dm: Issue 66: BufferManager: Fixed page replacement logic to always evict the LRU page even if it is dirty.
 * dm: Issue 64: BTree: Fetch fails when the search key is greater than all keys in the tree
 * dm: Issue 61: General: Make Storable objects immutable where possible
 * dm: Issue 59: BTree: Improve redistribute keys in BTree implementation
 * dm: Issue 58: General: Change the logger names so that the log messages have better module identification
 * dm: Issue 70: BTree: Removed assertion that looks incorrect after the new redistribute keys method.

1.0.11-BETA:
 * dm: Issue 43: TupleManager: Lots of refactoring to make the code more modular and easy to maintain.
 * dm: Issue 40: TupleManager: Fixed buffer page being latched exclusively during reads - should be 
   latched in shared mode.
 * dm: Issue 41: TupleManager: Space map page was being latched exclusively when shared latch was needed.
 * dm: Buffer Manager: Starvation on single cpu machine, with two threads. When a buffer 
   is written, notify one thread rather than all threads.
 * dm: Issue 21: BTree: Do not allow insert or delete on max (logical infinity) key.
 * dm: Issue 42: BTree Performance fix: Perform binary search on index nodes.
 * dm: Issue 39: BTree Performance fix: Avoid instantiating whole items when scanning for 
   child pointer in index node. Introduced PartialIndexItem. Note that this changes the
   storage format for index items.
 * dm: Issue 35: Output from deadlock detector reformatted.
 * dm: Issue 44: Starvation when two threads attempt to fix a buffer on a single CPU 
   machine and all buffers are dirty
   
1.0.10-BETA:
 * dm: Issue 34 - Expose additional configuration properties 
   log.disableFlushRequests - if true, performs log flush less frequently
   bufferpool.writerSleepInterval - changes the interval between write scans
   transaction.ckpt.interval - changes the interval between checkpoints
   lock.deadlock.detection.interval - changes the interval between deadlock checks
 * dm: Fixed issue 33 - The BTree code had a bug in the repair page underflow logic,
   where a page could potentially be accessed through a wrapper that had not been
   refreshed after the page was modified. 
 * dm: Enhancement issue 32 - To debug the concurrency errors we need a mechanism for tracing the complex
   operations with low overhead. See the article in DDJ April 23, 2007,
   Multi-threaded Debugging Techniques by Shameem Akhter and Jason Roberts.
   This article is an excerpt from the book Multi-Core Programming by the same authors.
 * dm: Fixed issue 31 - When an exception was thrown the page buffer was being
   unfixed but not set to null. This caused another call to unfix further down
   to fail. Affect the tuple manager.
 * dm: Fixed issue 29 - Fixed an issue with space allocation that occurred when
   there are pages marked as having space in the space map, but which actually
   contain uncommitted deletes, and therefore do not have space, the logic for 
   allocating a page goes into an endless loop. To break the loop added a check to
   see if the search had wrapped around.
 * dm: Fixed issue 28 - Fixed bug in redistribute keys operation. When moving a key from the right node to
   the left, instead of moving the first item, it is moving the last. 
 * dm: Fixed issue 27 - global lock wasn't being released during lock wait if the parkNano call returned
   before timeout. This meant that the deadlock detector could not get in to resolve deadlocks.
 * dm: Fixed issue 26 - BTree implementation was miscalculating the space required for accommodating 
   an index item in a node when the node was an index node but the key had come from a leaf node, ie,
   a child node.

1.0.9-BETA:
 * dm: Fixed issue 25 - latch deadlock when inserting tuples from multiple threads

1.0.8-BETA:
 * dm: Added a simple event publication mechanism
 * dm: Added a method to drop the database instance, including all storage.
 * dm: Added a method to StorageFactory to delete the entire storage tree.
 * dm: Added checksum verification to page reads and writes.
 * dm: Enhanced the storage factory interface to allow checking for the existence of a container.
 * dm: Enhanced the MessageCatalog component so that clients can register new messages dynamically.

1.0.7-BETA:
 * dm: Fixed a couple of severe defects.
           DecreaseTreeHeight was always setting unique flag to false, due to a typo.
           IndexItem comparison was incorrect when comparing leaf item with non-leaf item in a unique index.
 * dm: Fixed defect in the delete and scan BTree tests, which was sometimes causing infinite synchronization waits.

1.0.6-BETA:
 * dm: Fixed critical race condition in Buffer Manager.
 * dm: Fixed defect in Log Manager that causes it to run out of buffer space in heavy load.
 * dm: Changed implementation of server instance locking.
 * dm: Added support for log4j. 
 * dm: Various improvements to toString() implementations.

1.0.5-BETA:
 * dm: Added distributionManagement section to the maven pom to fix release:perform.
 
1.0.4-BETA:
 * dm: Rewrote the DeadlockDetector findDeadlockCycle() method.
 * dm: Disabled test case for concurrent server access to same database due to portability issues with file locking behaviour.

1.0.3-BETA:
 * dm: Refactored synchronization code in Buffer Manager, in particular, handling of volatile instance variables.
 * dm: Renamed the property log.disableExplicitFlushRequests to log.explicitFlushRequests.
 * dm: Renamed the property bufferpool.bufferWriterSleepInterval to bufferpool.writerSleepInterval.
 * dm: Reformatted all code using eclipse 3.3 to convert tabs to spaces.
 * dm: Added maven release plugin to pom.xml.

1.0.2-BETA: 10 June 2007:
 * dm: log.disableExplicitFlushRequests is now a property that can be set when creating a log instance.
 * dm: Property bufferpool.bufferWriterSleepInterval can now be set.
 * dm: Renamed Index to IndexContainer to match TupleContainer.
 * dm: Added a number of delegate methods in Server to simplify the API for clients.
 * dm: Server API simplified by removing accessor methods not required by most use cases.
 * dm: The openScan() method now accepts null key and null location parameters. If these are null,
       the scan starts from the first key in the tree. This similifies the interface for Server as
       there is no need to create minKey or null location.
 * dm: Allowed access to objectRegistry() from Server without a status check on the server, as there are
       legitimate use cases for this operation to occur prior to server start.
 * dm: Insert savepoint and rollback to savepoint (on failure) in tuple insert, update and delete methods.
 * dm: Insert savepoint and rollback to savepoint (on failure) in index insert and delete methods.
 * dm: Created usermanual.
       
1.0.1-BETA: 03 June 2007
 * dm: Added CHANGES.txt.
 * dm: Renamed register() methods in ObjectRegistry to registerType() and registerSingleton().
 * dm: Removed getIndex(int) from IndexManager.
 * dm: Removed getTupleContainer(int) method from TupleManager.
	
