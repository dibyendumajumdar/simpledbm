1.0.7-BETA:
 * dm: Fixed a couple of severe defects.
           DecreaseTreeHeight was always setting unique flag to false, due to a typo.
           IndexItem comparison was incorrect when comparing leaf item with non-leaf item in a unique index.
 * dm: Fixed defect in the delete and scan BTree tests, which was sometimes causing infinite synchronization waits.

1.0.6-BETA:
 * dm: Fixed critical race condition in Buffer Manager.
 * dm: Fixed defect in Log Manager that causes it to run out of buffer space in heavy load.
 * dm: Changed implementation of server instance locking.
 * dm: Added support for log4j. 
 * dm: Various improvements to toString() implementations.

1.0.5-BETA:
 * dm: Added distributionManagement section to the maven pom to fix release:perform.
 
1.0.4-BETA:
 * dm: Rewrote the DeadlockDetector findDeadlockCycle() method.
 * dm: Disabled test case for concurrent server access to same database due to portability issues with file locking behaviour.

1.0.3-BETA:
 * dm: Refactored synthronization code in Buffer Manager, in particular, handling of volatile instance variables.
 * dm: Renamed the property log.disableExplicitFlushRequests to log.explicitFlushRequests.
 * dm: Renamed the property bufferpool.bufferWriterSleepInterval to bufferpool.writerSleepInterval.
 * dm: Reformatted all code using eclipse 3.3 to convert tabs to spaces.
 * dm: Added maven release plugin to pom.xml.

1.0.2-BETA: 10 June 2007:
 * dm: log.disableExplicitFlushRequests is now a property that can be set when creating a log instance.
 * dm: Property bufferpool.bufferWriterSleepInterval can now be set.
 * dm: Renamed Index to IndexContainer to match TupleContainer.
 * dm: Added a number of delegate methods in Server to simplify the API for clients.
 * dm: Server API simplified by removing accessor methods not required by most use cases.
 * dm: The openScan() method now accepts null key and null location parameters. If these are null,
       the scan starts from the first key in the tree. This similifies the interface for Server as
       there is no need to create minKey or null location.
 * dm: Allowed access to objectRegistry() from Server without a status check on the server, as there are
       legitimate use cases for this operation to occur prior to server start.
 * dm: Insert savepoint and rollback to savepoint (on failure) in tuple insert, update and delete methods.
 * dm: Insert savepoint and rollback to savepoint (on failure) in index insert and delete methods.
 * dm: Created usermanual.
       
1.0.1-BETA: 03 June 2007
 * dm: Added CHANGES.txt.
 * dm: Renamed register() methods in ObjectRegistry to registerType() and registerSingleton().
 * dm: Removed getIndex(int) from IndexManager.
 * dm: Removed getTupleContainer(int) method from TupleManager.
	
